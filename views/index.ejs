<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Chat Application</title>
  <style>
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background-color: #121212;
      margin: 0;
      padding: 0;
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
      color: #ffffff;
    }
    .chat-container {
      width: 90%;
      max-width: 600px;
      height: 90%;
      max-height: 600px;
      background-color: #1f1f1f;
      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
      border-radius: 10px;
      overflow: hidden;
      display: flex;
      flex-direction: column;
    }
    .chat-header {
      padding: 10px;
      background-color: #6200ea;
      color: white;
      text-align: center;
      font-size: 1.5em;
      font-weight: bold;
    }
    .chat-messages {
      flex: 1;
      padding: 10px;
      overflow-y: auto;
      background-color: #2a2a2a;
      color: #e0e0e0;
    }
    .chat-messages ul {
      list-style-type: none;
      padding: 0;
      margin: 0;
    }
    .chat-messages li {
      padding: 8px 12px;
      margin-bottom: 8px;
      border-radius: 20px;
      background-color: #6200ea;
      color: white;
      max-width: 75%;
      word-wrap: break-word;
    }
    .my-message {
      background-color: #007bff;
      color: white;
      margin-left: auto;
      text-align: right;
    }
    .chat-input {
      display: flex;
      padding: 10px;
      background-color: #333333;
      border-top: 1px solid #444444;
    }
    .chat-input input[type="text"] {
      flex: 1;
      padding: 10px;
      border: 1px solid #444444;
      border-radius: 20px;
      margin-right: 10px;
      background-color: #2a2a2a;
      color: #ffffff;
    }
    .chat-input button {
      padding: 10px 20px;
      background-color: #6200ea;
      color: white;
      border: none;
      border-radius: 20px;
      cursor: pointer;
    }
    .chat-input button:hover {
      background-color: #7e1ff5;
    }
    #typing {
      padding: 10px;
      color: #b0b0b0;
      font-style: italic;
      display: none;
      background-color: #2a2a2a;
      border-top: 1px solid #444444;
    }
  </style>
</head>
<body>
  <div class="chat-container">
    <div class="chat-header">
      Chat Box
    </div>
    <div class="chat-messages" id="chat-messages">
      <ul id="msglist">
        <% for (let i = 0; i < chats.length; i++) { %>
          <li class="<%= chats[i].user1 === name ? 'my-message' : '' %>">
            <%= chats[i].user1 %> : <%= chats[i].content %>
          </li>
        <% } %>
      </ul>
      <span id="typing">typing...</span>
    </div>
    <div class="chat-input">
      <input type="text" id="username" placeholder="Username" />
      <input type="text" id="newmsg" placeholder="Message" />
      <button id="btn">Send</button>
    </div>
  </div>

  <input id="startChat" type="hidden" data-roomId="<%= id %>"></input>

  <script src="/socket.io/socket.io.js"></script>
  <script>
    var socket = io();

    let startChat = document.getElementById("startChat");
    let typingIndicator = document.getElementById("typing");
    let inputMsg = document.getElementById("newmsg");
    let msgList = document.getElementById("msglist");
    let chatMessages = document.getElementById("chat-messages");

    socket.emit('join_room', {
      roomId: startChat.getAttribute('data-roomId')
    });

    function scrollToBottom() {
      chatMessages.scrollTop = chatMessages.scrollHeight;
    }

    function sendMessage() {
      let username = document.getElementById("username").value;
      let message = inputMsg.value.trim();

      if (message) {
        socket.emit("msg_send", {
          msg: message,
          username: username,
          roomId: startChat.getAttribute("data-roomId"),
        });

        inputMsg.value = '';
        inputMsg.focus();
      }
    }

    document.getElementById("btn").addEventListener("click", function () {
      sendMessage();
    });

    inputMsg.addEventListener("keypress", function (e) {
      if (e.key === "Enter") {
        sendMessage();
      } else {
        socket.emit('typing', {
          roomId: startChat.getAttribute('data-roomId')
        });
      }
    });

    socket.on("msg_rcvd", (data) => {
      let liMsg = document.createElement("li");
      liMsg.innerText = `${data.username} : ${data.msg}`;
      if (data.username === '<%= name %>') {
        liMsg.classList.add("my-message");
      }
      msgList.appendChild(liMsg);
      scrollToBottom();
      typingIndicator.style.display = "none";
    });

    socket.on('someone_typing', (data) => {
      typingIndicator.style.display = "block";
      clearTimeout(window.typingTimeout);
      window.typingTimeout = setTimeout(() => {
        typingIndicator.style.display = "none";
      }, 2000);
    });

    window.onload = function () {
      inputMsg.focus();
    };
  </script>
</body>
</html>
