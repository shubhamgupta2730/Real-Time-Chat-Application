<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Chat Application</title>
    <style>
      body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        background-color: #121212;
        margin: 0;
        padding: 0;
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        color: #ffffff;
      }
      .chat-container {
        width: 90%;
        max-width: 600px;
        height: 90%;
        max-height: 600px;
        background-color: #1f1f1f;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
        border-radius: 10px;
        overflow: hidden;
        display: flex;
        flex-direction: column;
      }
      .chat-header {
        padding: 10px;
        background-color: #6200ea;
        color: white;
        text-align: center;
        font-size: 1.5em;
        font-weight: bold;
      }
      .chat-messages {
        flex: 1;
        padding: 10px;
        overflow-y: auto;
        background-color: #2a2a2a;
        color: #e0e0e0;
      }
      .chat-messages ul {
        list-style-type: none;
        padding: 0;
        margin: 0;
      }
      .chat-messages li {
        padding: 8px 12px;
        margin-bottom: 8px;
        border-radius: 20px;
        background-color: #6200ea;
        color: white;
        max-width: 75%;
        word-wrap: break-word;
      }
      .chat-input {
        display: flex;
        padding: 10px;
        background-color: #333333;
        border-top: 1px solid #444444;
      }
      .chat-input input[type="text"] {
        flex: 1;
        padding: 10px;
        border: 1px solid #444444;
        border-radius: 20px;
        margin-right: 10px;
        background-color: #2a2a2a;
        color: #ffffff;
      }
      .chat-input button {
        padding: 10px 20px;
        background-color: #6200ea;
        color: white;
        border: none;
        border-radius: 20px;
        cursor: pointer;
      }
      .chat-input button:hover {
        background-color: #7e1ff5;
      }
      #typing {
        padding-left: 10px;
        color: #b0b0b0;
        font-style: italic;
      }
    </style>
  </head>
  <body>
    <div class="chat-container">
      <div class="chat-header">
        Chat Box
      </div>
      <div class="chat-messages">
        <ul id="msglist">
          <% for (let i = 0; i < chats.length; i++) { %>
            <li><%= chats[i].user1 %> : <%= chats[i].content %></li>
          <% } %>
        </ul>
        <span id="typing">typing...</span>
      </div>
      <div class="chat-input">
        <input type="text" id="username" placeholder="Username" />
        <input type="text" id="newmsg" placeholder="Message" />
        <button id="btn">Send</button>
      </div>
    </div>

    <input id="startChat" type="hidden" data-roomId="<%= id %>"></input>

    <script src="/socket.io/socket.io.js"></script>
    <script>
      var socket = io();

      let startChat = document.getElementById("startChat");

      let recieveTypingId = null;
      let typingId = null;

      let btn = document.getElementById("btn");
      let spanTyping = document.getElementById("typing");
      spanTyping.style.display = "none";
      let inputMsg = document.getElementById("newmsg");
      let username = document.getElementById("username");
      let msgList = document.getElementById("msglist");

      socket.emit('join_room', {
        roomId: startChat.getAttribute('data-roomId')
      });

      btn.onclick = function exec() {
        socket.emit("msg_send", {
          msg: inputMsg.value,
          username: username.value,
          roomId: startChat.getAttribute("data-roomId"),
        });
        inputMsg.value = '';
      };

      socket.on("msg_rcvd", (data) => {
        let limsg = document.createElement("li");
        limsg.innerText = `${data.username} : ${data.msg}`;
        msgList.appendChild(limsg);
        spanTyping.style.display = "none";
      });

      socket.on('someone_typing', (data) =>{
        spanTyping.style.display = "block";
        clearTimeout(recieveTypingId);
        recieveTypingId = setTimeout(() => {
          spanTyping.style.display = "none";
        }, 2000);
      });

      inputMsg.addEventListener("keypress", function (e) {
        socket.emit('typing', {
          roomId: startChat.getAttribute('data-roomId')
        });
        clearTimeout(typingId);
        typingId = setTimeout(() => {
          spanTyping.style.display = "none";
        }, 2000);
      });
    </script>
  </body>
</html>
